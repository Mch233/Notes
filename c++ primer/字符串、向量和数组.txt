头文件不应包含using声明

string

#include <string>
using std::string;

初始化　
    string s1("abc"); //直接初始化
    string s2 = "abc"; //拷贝初始化
    string s3(3,'c');

操作
    os << s
    cin >> s 　	//空白分隔，遇到空白停止读入
    getline(is,s)
    s.empty()
    s.size()	//返回无符号类型的值，切勿混用有符号数运算
    s[n]	//访问字符串第n个字符
    
    比较大小　
	１字母大、
	２长

    ＋　　//两侧的运算对象至少有一个是string, "s"是字面值

    使用下标访问时必须确保其在合理范围之内　可令索引为string::size_type类型避免为负数

    cctype头文件中的函数
	toupper(c)
    	tolower(c)

for(变量:序列)
    表达式

vector
#include <vector>
using std::vector;

初始化
    vector<T> v1
    vector<int> v1(10); //构建10个元素
    vector<int> v1{10}; //初始化一个元素10

添加元素
    v.push_back()
    范围for语句体内不应该改变其所遍历序列的大小　//添加元素的语句可能改变vector对象的容量
    不能通过下标运算添加元素

其他操作
    v.empty()
    v.size()

访问
    通过位置v[n]

只能对确知已存在的元素进行下表操作

迭代器
迭代器是容器的配套组件，本质上就是一安全的指针

auto b = v.begin();
auto e = v.end();

运算
    *iter;
    ++iter;
    --iter;
    == 
    !=

    iter + n
    iter - n
    iter1 - iter2   //迭代器之间的距离

    >  >=  <  <=    //比较的是位置前后，前小，后大   

数组
    定义
	维度必须是常量表达式

    初始化
	字符数组    char a[] = "c++";

    理解复杂的数组声明
	默认情况下，类型修饰符从右向左依次绑定
	从数组的名字开始由内向外
	int *ip[4];	//整型指针的数组
	int (*ip)[4];	//指向含有4个整数的数组

    begin和end
	iterator头文件
	int *b = begin(ia);//指向首元素的指针
	int *e = end(ia);//指向尾元素下一位置的指针

    int *p = ia[2];//p指向索引为2的元素
    int j = p[-2];//p[-2]是ia[0]表示的那个元素

    多维数组－数组的数组
    初始化
	int ia[3][4] = {
	    {0,1,2,3},
	    {4,5,6,7},
	    {8,9,10,11}
	}
    访问
	ia[1];//第二个数组
	ia[0][1];//第一个数组的第二个元素
    特性
	使用多维数组的名字时，会自动转换为指向数组首元素的指针，
	故，使用范围for语句处理多维数组，除了最内层的循环外，其他所有循环的控制变量都应该是引用类型。
    

