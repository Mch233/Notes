数据类型

选择
    非负数－> 无符号类型
    整数运算－> int
    浮点运算－> double
    
注意
    算术表达式中不使用char或bool
    
    算术表达式中　　（内存溢出）
		既有带符号和无符号类型，带符号类型取值为负时会出现异常结果　int --> unsigned
		无符号类型减法运算要确保结果不能为负
    　　　　　　　　　　　
转换

转义字符
    \n　换行
    \t　横向制表
    \a　报警
    \v　纵向制表
    \b　退格
    \r　回车
    \f　进纸

字面值
    字符前缀 u U L u8
    数值后缀 
	整数u l ll 
	浮点f l

变量 一次定义，多次声明
    定义 
    int i //声明并定义
    extern int i = 2 //定义

    声明 
    extern int i //声明

    初始化
    int n(3);

    列表初始化 //对于可能存在丢失数据的初始化会报错，如int i{2.12}
	int i{1} 
	int i = {1}

作用域
    以{}为作用域边界
    内层可用外层数据
    外层数据可被内层覆盖

引用 int &
    定义时必须初始化,以绑定对象
    初始值必须是一个对象且类型应匹配
    初始化后不可变更绑定对象
    引用不是对象，引用即别名

指针 int *
    &取地址　*取值

复合类型
    int i = 1024;
    int *p = &i;    //p是一个指针，它的值是i的地址
    从右向左阅读r的含义，离变量名最近的符号对变量的类型有最直接的影响
    int *&r = p;    //r是一个引用，它的值是p的值

    const int * const * const p; 到底是什么意思呢？
    其实rule很简单：就三条
    1. 永远从右往左读一个变量声明。
    2. const永远修饰const出现地点左边的声明类型。
    3. 如果左边没有声明类型，就修饰右边。
    所以
    const int * const * const p1; //两者是一致的
    int const * const * const p2;
	解释为：p2是一个const的指针（指针本身不能变），指向const的指针（指向的指针也不能变），指向const int，最终指向的内存区域是一个int变量，也不能变。所以用标准写法，也就是第二种写法在理解上会方便一些。但是第一种写法过于普遍了，几乎所有代码都这么写。下次读的时候从右往左然后自动脑补最左边的const是修饰右边的类型就好。

const
const对象必须初始化
如果想在多个文件之间共享const对象，必须在变量的定义之前添加extern
    
    底层const 指针所指对象是常量
    const int *a  
    仅能保证不能通过引用\指针改变对象的值，对象的值仍可通过其他途径更改
    
    顶层const 指针本身是个常量
    int *const a 常量指针   //指向不变，指针的值（地址）不变

typedef别名
    typedef int a

auto
    忽略const效果
    必须定义并初始化
    auto p = &i;  //int *p    
    int *p; auto b = p;  //int *b

decltype
    保留const效果
    decltype(f())  //得到函数返回值的类型
    decltype(r)
    decltype(*p)　 //int &类型
    decltype((w))  //双层()得到int &类型

