重载运算符
    可定义:运算对象的类型和返回值的类型
    不变的:运算对象的个数、运算符的优先级和结合律

左值和右值
    左值:对象的身份(在内存中的位置)
    右值:对象的值(内容)

取余运算
运算对象必须是整数
    m % (-n) -- m % n　结果为正数
    (-m) % n -- -(m % n)　结果为负数

短路求值
    只有当左侧对象无法确定表达式的结果时才计算右侧运算对象的值
    左侧运算对象是为了确保右侧运算对象求值过程的正确性和安全性
    &&  ||

比较运算
    进行比较运算时除非比较对象是布尔类型，否则不要使用true和false

递增
    尽可能用 ++i(先加1后用)
    *p++ 优先级等同于 *(p++) //先解引用p,后指针p移动

成员访问运算符
    p -> m 等价于 (*p).m

sizeof
    返回值为常量表达式，可以用来声明数组的维度
    sizeof(p) //指针本身所占空间的大小
    sizeof(*p) //指针所指对象所占空间的大小
    sizeof(string或vector) //只返回固定部分的大小

逗号,
    首先左侧求值舍弃，结果为右侧表达式的值

类型转换
    隐式转换
    小　->  大　统一类型
    赋值语句，右　->  左
    int  -> unsigned int
    long  unsigned int
	long int 大小相同 long -> unsigned int
	long 占用空间大　unsigned int -> long

    显式转换
    static_cast<type>(a); 
    //大->小

    const_cast<type>(p); 
    //type必须是指针或者引用类型，且type不能改变，应与之前一致
    //去掉对象的底层const属性

    reinterpret_cast<type>(a)
    //如int* -> char*，慎用


