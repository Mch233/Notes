#切片
读取片段
list/tuple/str
	[始：末：间隔]
	[始：末]

#迭代

因为dict的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。

默认情况下，dict迭代的是key
如果要迭代value，				for value in d.values()
如果要同时迭代key和value，  	for k, v in d.items()

字符串也是可迭代对象

如何判断一个对象是可迭代对象呢？
	通过collections模块的Iterable类型判断
	from collections import Iterable
	isinstance('abc', Iterable)

如果要对list实现类似Java那样的下标循环怎么办？
	enumerate函数可以把一个list变成索引-元素对
	for i, value in enumerate(['A', 'B', 'C']):
	print(i, value)

#列表生成式
创建列表
 1.[x * x for x in range(1, 11)]

 2.[x * x for x in range(1, 11) if x % 2 == 0]

 3.d = {'x': 'A', 'y': 'B', 'z': 'C' }
 [k + '=' + v for k, v in d.items()]
 ['y=B', 'x=A', 'z=C']

 4.L = ['Hello', 'World', 'IBM', 'Apple']
 [s.lower() for s in L]
 ['hello', 'world', 'ibm', 'apple']

#生成器

一边循环一边计算的机制，称为生成器：generator。

创建generator
	把一个列表生成式的[]改成()，就创建了一个generator

获取数据
	1.一般for迭代获取
	2.通过next()函数获得generator的下一个返回值



把函数改成generator后
用for循环调用generator时，拿不到generator的return语句的返回值。
拿到返回值，必须捕获StopIteration错误

#迭代器

##迭代对象
可以直接作用于for循环的对象统称为可迭代对象：Iterable

可以直接作用于for循环的数据类型有以下几种：

	一类是集合数据类型，如list、tuple、dict、set、str等；
	
	一类是generator，包括生成器和带yield的generator function。


迭代对象判断
	isinstance()

##迭代器
可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。

迭代器判断
	isinstance()

生成器都是Iterator对象
但list、dict、str虽然是Iterable，却不是Iterator。


iter()
	把list、dict、str等Iterable变成Iterator


为什么list、dict、str等数据类型不是Iterator？

这是因为Python的Iterator对象表示的是一个数据流，


可以把这个数据流看做是一个有序序列，不能提前知道序列的长度，只有在需要返回下一个数据时它才会计算。

Iterator可以表示一个无限大的数据流。而使用list是永远不可能存储全体自然数的。