程序运行中的错误
	
	错误类型
		1.bug 			
		比如本来应该输出整数结果输出了字符串
		2.用户错误输入 		
		比如让用户输入email地址，结果得到一个空字符串	
		3.异常				比如写入文件的时候，磁盘满了，写不进去了，或者从网络抓取数据，网络突然断掉了

		如果运行程序发生了错误，可以事先约定返回一个错误代码，这样，就可以知道是否有错，以及出错的原因
		弊端
			用错误码来表示是否出错十分不便
			因为函数本身应该返回的正常结果和错误码混在一起，
			造成调用者必须用大量的代码来判断是否出错
		
	错误处理

		用try来运行可能出错的代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即except语句块，执行完except后，如果有finally语句块，则执行finally语句块，至此，执行完毕
		说明
			1.可以用多个except来捕获不同类型的错误
			2.try不但捕获该类型的错误，还把其子类也“一网打尽”
			3.如果错误没有被捕获，它就会一直往上抛，最后被Python解释器捕获，打印一个错误信息，然后程序退出
			4.出错的时候，一定要分析错误的调用栈信息，才能定位错误的位置

	记录错误

		logging模块记录错误信息

	抛出错误

		如果要抛出错误，
		首先根据需要，可以定义一个错误的class，
		选择好继承关系
		然后，用raise语句抛出一个错误的实例

调试
	1.print
		用print()把可能有问题的变量打印出来看看
		弊端：将来得删掉它，运行结果也会包含很多垃圾信息

	2.断言
		assert n != 0, 'n is zero!'
		表达式 n != 0 应该是True，
		否则，根据程序运行的逻辑，后面的代码肯定会出错
		如果n = 0断言失败，assert语句抛出AssertionError： n is zero!

		python -O file.py 关闭assert
		关闭后，所有的assert语句当成pass来看

	3.logging
		logging不会抛出错误，而且可以输出到文件

		优点1
			logging.basicConfig(level=logging.INFO)

			允许指定记录信息的级别，有debug，info，warning，error等几个级别
			当指定level=INFO时，logging.debug就不起作用了
			指定level=WARNING后，debug和info就不起作用了
			可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息

		优点2

			通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件

	4.利用IDE

		利用支持调试功能的IDE，设置断点、单步执行

单元测试
	用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作

	测试用例
		要覆盖
				常用的输入组合
				边界条件
				异常

	单元测试通过后有什么意义呢？
		如果对函数代码做了修改，只需要再跑一遍单元测试
		如果通过，说明修改不会对函数原有的行为造成影响
		如果测试不通过，说明修改与原有行为不一致，要么修改代码，要么修改测试

		好处：确保一个程序模块的行为符合设计的测试用例。在将来修改的时候，可以极大程度地保证该模块行为仍然是正确的

	编写单元测试时
		引入Python自带的unittest模块
		需要编写一个测试类，从unittest.TestCase继承。
		以test开头的方法就是测试方法，不以test开头的方法不被认为是测试方法，测试的时候不会被执行
		对每一类测试都需要编写一个test_xxx()方法

		最常用的断言

			1.assertEqual()：

				self.assertEqual(abs(-1), 1) 		# 断言函数返回的结果与1相等

			2.assertRaises()
				期待抛出指定类型的Error

				比如
				通过d['empty']访问不存在的key时，断言会抛出KeyError：
				with self.assertRaises(KeyError):
				    value = d['empty']

				通过d.empty访问不存在的key时，期待抛出AttributeError：
				with self.assertRaises(AttributeError):
				    value = d.empty

	运行单元测试
		在命令行通过参数-m unittest直接运行单元测试
		 	python -m unittest filename

	setUp与tearDown
		可以在单元测试中编写两个特殊的setUp()和tearDown()方法
		这两个方法会分别在每调用一个测试方法的前后分别被执行
			1.setUp()
			2.test
			3.tearDown()

文档测试
	“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试

	doctest严格按照Python交互式命令行的输入和输出来判断测试结果是否正确
	只有测试异常的时候，可以用...表示中间一大段烦人的输出
	什么输出也没有说明编写的doctest运行都是正确的
	如果程序有问题，再运行就会报错





