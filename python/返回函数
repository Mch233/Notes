１.函数作为返回值

	相关参数和变量都保存在返回的函数中，这种称为闭包（Closure）

	特点
		即使传入相同的参数，每次调用都会返回一个新的函数
		返回的函数并没有立刻执行，而是直到调用了f()才执行

	注意事项
		返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量

		如果一定要引用循环变量怎么办？
			方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变

	×意义何在？用途？





2.匿名函数　lambda

	例：lambda x: x * x

	关键字lambda表示匿名函数，冒号前面的x表示函数参数。

	限制：只能有一个表达式，不用写return，返回值就是该表达式的结果

	好处：因为函数没有名字，不必担心函数名冲突。

	匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数
	也可以把匿名函数作为返回值返回





×3.装饰器
	在代码运行期间动态增加功能的方式，称之为“装饰器”
	本质上，decorator就是一个返回函数的高阶函数

	函数对象有一个__name__属性，可以得到函数的名字

	借助Python的@语法，把decorator置于函数的定义处
	相当于执行了语句：now = log(now)

	和两层嵌套的decorator相比，3层嵌套的效果是这样的：
	>>> now = log('execute')(now)





４.偏函数　functools.partial

	当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数
	这个新函数可以固定住原函数的部分参数，从而在调用时更简单。

	例子：

		>>> import functools
		>>> int2 = functools.partial(int, base=2)　　　　＃kw = { 'base': 2 }
		>>> int2('1000000')

	作用：把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数

	创建偏函数时，可以接收函数对象、*args和**kw这3个参数

	可变参数－－传入的参数个数是可变的
	*args是可变参数，args接收的是一个tuple；
	*args：表示把args这个list的所有元素作为可变参数传进去。

	**kw是关键字参数，kw接收的是一个dict。
	**kw把kw这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict
	注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra。







