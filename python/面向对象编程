面向过程的程序设计
	把计算机程序视为一系列的命令集合，即一组函数的顺序执行。
	为了简化程序设计，面向过程把函数继续切分为子函数，
	即把大块函数通过切割成小块函数来降低系统的复杂度。

面向对象的程序设计
	把计算机程序视为一组对象的集合，
	而每个对象都可以接收其他对象发过来的消息，并处理这些消息，
	计算机程序的执行就是一系列消息在各个对象之间传递。

类中方法
	和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self

	self，表示创建的实例本身，在__init__方法内部，可以把各种属性绑定到self

	有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去

	除此之外，类的方法和普通函数没有什么区别，
	所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。
	例：
	class Student(object):

	    def __init__(self, name, score):
	        self.name = name
	        self.score = score






类－综述
	类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响
	实例可以绑定类中未定义的方法、属性

	类就是一种自定义的数据类型，实例就是变量

	方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；

	通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。

私有变量
	变量名以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问
	内部的__name变量被Python解释器自动改成了_Class__name

	外部代码访问
		通过get_name方法读取数据
		通过set_name方法修改数据　可以对参数做检查，避免传入无效的参数：

	__xxx__变量，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量
	特殊变量是可以直接访问的，不是private变量

	_name变量，外部是可以访问的
	但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”

继承

	继承有什么好处？
		最大的好处是子类获得了父类的全部功能
		可以对代码做一点改进

	在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。
	但是，反过来就不行	

多态

	当子类和父类都存在相同的run()方法时，子类的run()覆盖了父类的run()在代码运行的时候，总是会调用子类的run()。
	这样，我们就获得了继承的另一个好处：多态。

	多态的好处
		当我们需要传入Dog、Cat、Tortoise……时，我们只需要接收Animal类型就可以了，因为Dog、Cat、Tortoise……都是Animal类型，然后，按照Animal类型进行操作即可。
		由于Animal类型有run()方法，因此，传入的任意类型，只要是Animal类或者子类，就会自动调用实际类型的run()方法，这就是多态

		对于一个变量，我们只需要知道它是Animal类型，无需确切地知道它的子类型，就可以放心地调用run()方法，而具体调用的run()方法是作用在Animal、Dog、Cat还是Tortoise对象上，由运行时该对象的确切类型决定，这就是多态真正的威力

	对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了：
					class Timer(object):
						def run(self):
							print('Start...')

获取对象信息

	type()
	判断对象类型，使用type()函数

	isinstance()
	判断class的类型，使用isinstance()函数

	dir()
	获得一个对象的所有属性和方法，可以使用dir()函数，它返回一个包含字符串的list　

实例属性和类属性

	1.实例属性属于各个实例所有，互不干扰  		s.name
	2.类属性属于类所有，所有实例共享一个属性         Class.name

	3.类属性和实例属性是分开的，实例属性优先级高
	4.不要对实例属性和类属性使用相同的名字，相同名称的实例属性将屏蔽掉类属性

	Python是动态语言，根据类创建的实例可以任意绑定属性。
	
	给实例绑定属性
		1.通过实例变量
		 　　s = Student('Bob')  		 #创建实例s
			s.score = 90　　　	         ＃绑定实例属性score

		2.通过self变量
			class Student(object):
			    def __init__(self, name):
			        self.name = name		       


